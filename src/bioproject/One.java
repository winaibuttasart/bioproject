package bioproject;

import static bioproject.MainPage.one;
import java.awt.Color;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author Nize
 */
public class One extends javax.swing.JFrame {

    int count = 0, count1 = 0;
    boolean check = false, checkmouse = true;
    String c, txt;
    Algorithms a = new Algorithms();

    public One() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("แปลงรหัส DNA หรือ mRNA เป็นตัวใหญ่หรือตัวเล็ก");
        setMaximumSize(new java.awt.Dimension(732, 499));
        setMinimumSize(new java.awt.Dimension(732, 499));
        setPreferredSize(new java.awt.Dimension(732, 530));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("กรอกสาย DNA หรือ mRNA ที่ต้องการแปลง");
        jTextArea1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextArea1CaretUpdate(evt);
            }
        });
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 40, 640, 160);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(50, 330, 640, 160);

        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(690, 160, 40, 40);

        jTextField1.setEditable(false);
        jTextField1.setForeground(new java.awt.Color(204, 204, 204));
        jTextField1.setText("1-100");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField1);
        jTextField1.setBounds(250, 203, 140, 40);

        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3);
        jLabel3.setBounds(160, 250, 120, 30);

        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel4);
        jLabel4.setBounds(160, 290, 130, 30);

        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 290, 130, 30);

        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6);
        jLabel6.setBounds(310, 250, 130, 30);

        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7);
        jLabel7.setBounds(460, 290, 130, 30);

        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8);
        jLabel8.setBounds(460, 250, 130, 30);

        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckBox1MousePressed(evt);
            }
        });
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(40, 210, 21, 20);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel9.setText("N/A");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(560, 210, 70, 20);

        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel10);
        jLabel10.setBounds(70, 10, 110, 30);

        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel12);
        jLabel12.setBounds(690, 10, 40, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Photo/01.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 730, 500);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public void getCo(String a) {
        Highlighter.HighlightPainter cyanPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
        Highlighter.HighlightPainter redPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.red);
        Pattern p = Pattern.compile("[a,t,g,c,u]");
        Matcher m = p.matcher(a);
        while (m.find()) {
            try {
                jTextArea1.getHighlighter().addHighlight(m.start(), m.end(), cyanPainter);
            } catch (BadLocationException ex) {
                System.out.println("Not found.");
            }
        }
        p = Pattern.compile("[^atgcuATGCU\n]");
        m = p.matcher(a);
        while (m.find()) {
            try {
                jTextArea1.getHighlighter().addHighlight(m.start(), m.end(), redPainter);
            } catch (BadLocationException ex) {
                System.out.println("Not found.");
            }
        }
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        MainPage m = new MainPage();
        m.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        jLabel9.setText("N/A");
        jTextArea1.setText("กรอกสาย DNA หรือ mRNA ที่ต้องการแปลง");
        count = 0;
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        if (count == 0) {
            jTextArea1.setText("");
        }
        count++;
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        if (count == 0) {
            jTextArea1.setText("");
        }
        count++;
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        if (count1 == 0) {
            jTextField1.setText("");
        }
        count1++;
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        if (count1 == 0 && !checkmouse) {
            jTextField1.setText("");
        }
        count1++;
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        String tmp = "";
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            if (jTextArea1.getSelectedText() != null) {
                tmp += jTextArea1.getText().substring(0, jTextArea1.getSelectionStart());
                tmp += jTextArea1.getSelectedText().toUpperCase();
                tmp += jTextArea1.getText().substring(jTextArea1.getSelectionEnd(), jTextArea1.getText().length());
                jTextArea1.setText(tmp);
            } else {
                if (!a.CheckError(txt.replaceAll("\n", ""))) {
                    jLabel9.setText(txt.replaceAll("\n", "").length() + "");//here
                    if (check) {
                        String y = jTextField1.getText().replaceAll(" ", "");
                        jTextField1.setText(y);
                        String t[] = y.split("-");
                        if (t.length == 2) {
                            if (Integer.parseInt(t[0]) > 0 && Integer.parseInt(t[1]) > 0) {
                                c = a.ChangeSmallToBig(Integer.parseInt(t[0]), Integer.parseInt(t[1]), txt.replaceAll("\n|\\ ", ""));
                                if (c.length() > 0 && c.charAt(0) != '*') {
                                    jTextArea2.setText("");
                                    jTextArea2.setText(c);
                                } else {
                                    JOptionPane.showMessageDialog(this,
                                            "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                            JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this,
                                        "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        jTextArea2.setText(a.PrintFormat(txt.toUpperCase().replaceAll("\n", "")));
                    }

                } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    jLabel9.setText(txt.replaceAll("\n", "").length() + "");
                    if (check) {
                        String y = jTextField1.getText().replaceAll(" ", "");
                        jTextField1.setText(y);
                        String t[] = y.split("-");
                        if (t.length == 2) {
                            if (Integer.parseInt(t[0]) > 0 && Integer.parseInt(t[1]) > 0) {
                                c = a.ChangeSmallToBig(Integer.parseInt(t[0]), Integer.parseInt(t[1]), txt.replaceAll("\n|\\ ", ""));
                                if (c.length() > 0 && c.charAt(0) != '*') {
                                    jTextArea2.setText("");
                                    jTextArea2.setText(c);
                                } else {
                                    JOptionPane.showMessageDialog(this,
                                            "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                            JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this,
                                        "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        jTextArea2.setText(a.PrintFormat(txt.toUpperCase().replaceAll("\n", "")));
                    }

                } else {
                    jTextArea2.setText("N/A");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            String tmp = "";
            if (jTextArea1.getSelectedText() != null) {
                tmp += jTextArea1.getText().substring(0, jTextArea1.getSelectionStart());
                tmp += jTextArea1.getSelectedText().toLowerCase();
                tmp += jTextArea1.getText().substring(jTextArea1.getSelectionEnd(), jTextArea1.getText().length());
                jTextArea1.setText(tmp);
            } else {
                if (!a.CheckError(txt.replaceAll("\n", ""))) {
                    jLabel9.setText(txt.replaceAll("\n", "").length() + "");
                    if (check) {
                        String y = jTextField1.getText().replaceAll(" ", "");
                        jTextField1.setText(y);
                        String t[] = y.split("-");
                        if (t.length == 2) {
                            if (Integer.parseInt(t[0]) > 0 && Integer.parseInt(t[1]) > 0) {
                                c = a.ChangeBigToSmall(Integer.parseInt(t[0]), Integer.parseInt(t[1]), txt.replaceAll("\n|\\ ", ""));
                                if (c.length() > 0 && c.charAt(0) != '*') {
                                    jTextArea2.setText("");
                                    jTextArea2.setText(c);
                                } else {
                                    JOptionPane.showMessageDialog(this,
                                            "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                            JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this,
                                        "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        jTextArea2.setText(a.PrintFormat(txt.toLowerCase().replaceAll("\n", "")));
                    }

                } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    jLabel9.setText(txt.toLowerCase().replaceAll("\n", "").length() + "");
                    if (check) {
                        String y = jTextField1.getText().replaceAll(" ", "");
                        jTextField1.setText(y);
                        String t[] = y.split("-");
                        if (t.length == 2) {
                            if (Integer.parseInt(t[0]) > 0 && Integer.parseInt(t[1]) > 0) {
                                c = a.ChangeBigToSmall(Integer.parseInt(t[0]), Integer.parseInt(t[1]), txt.replaceAll("\n|\\ ", ""));
                                if (c.length() > 0 && c.charAt(0) != '*') {
                                    jTextArea2.setText("");
                                    jTextArea2.setText(c);
                                } else {
                                    JOptionPane.showMessageDialog(this,
                                            "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                            JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this,
                                        "กรุณากรอกช่วงที่ต้องการแปลงให้ถูกต้อง", "แจ้งเตือน",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        jTextArea2.setText(a.PrintFormat(txt.toLowerCase().replaceAll("\n", "")));
                    }
                } else {
                    jTextArea2.setText("N/A");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            if (!a.CheckError(txt.replaceAll("\n", ""))) {
                jLabel9.setText(a.mRNAToDNA(txt.toUpperCase()).replaceAll("\n", "").length() + "");
                jTextArea2.setText(a.mRNAToDNA(txt.toUpperCase()));
            } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                jLabel9.setText(a.mRNAToDNA(txt.toUpperCase()).length() + "");
                jTextArea2.setText(a.mRNAToDNA(txt.toUpperCase()));
            } else {
                jTextArea2.setText("N/A");
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            if (!a.CheckError(txt.replaceAll("\n", ""))) {
                jLabel9.setText(a.DNATomRNA(txt.toUpperCase()).replaceAll("\n", "").length() + "");
                jTextArea2.setText(a.DNATomRNA(txt.toUpperCase()));
            } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                jLabel9.setText(a.DNATomRNA(txt.toUpperCase()).length() + "");
                jTextArea2.setText(a.DNATomRNA(txt.toUpperCase()));
            } else {
                jTextArea2.setText("N/A");
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            if (!a.CheckError(txt.replaceAll("\n", ""))) {
                jLabel9.setText(a.CutSmall(txt).replaceAll("\n", "").length() + "");
                jTextArea2.setText(a.CutSmall(txt));
            } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                jLabel9.setText(a.CutSmall(txt).length() + "");
                jTextArea2.setText(a.CutSmall(txt));
            } else {
                jTextArea2.setText("N/A");
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        jLabel9.setText("N/A");
        txt = jTextArea1.getText();
        if (txt.length() > 0 && txt.charAt(0) != 'ก') {
            getCo(txt);
            if (!a.CheckError(txt.replaceAll("\n", ""))) {
                jLabel9.setText(a.CutCapital(txt).replaceAll("\n", "").length() + "");
                jTextArea2.setText(a.CutCapital(txt));
            } else if (JOptionPane.showConfirmDialog(null, "สายข้อมูลนำเข้ามีข้อผิดพลาด\nต้องการดำเนินการต่อหรือไม่", "แจ้งเตือน",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                jLabel9.setText(a.CutCapital(txt).length() + "");
                jTextArea2.setText(a.CutCapital(txt));
            } else {
                jTextArea2.setText("N/A");
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "กรุณากรอกสาย DNA หรือ mRNA ที่ต้องการแปลง", "แจ้งเตือน",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jCheckBox1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MousePressed
        if (checkmouse) {
            check = true;
            jTextField1.setEditable(true);
            checkmouse = false;
            count = 0;
            count1 = 0;
            jTextField1.setForeground(Color.BLACK);
        } else {
            check = false;
            jTextField1.setEditable(false);
            checkmouse = true;
            count = 0;
            count1 = 0;
            jTextField1.setText("1-100");
            jTextField1.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_jCheckBox1MousePressed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        jTextArea1.setText("ATGCGCTCtctTTCAGCATTCGTCTTCCTCTCGGTCATCGTCGGcaca\n"
                + "TATGGCGCAATAGGTCCaagCACCAGTCTTTACATCGCAaacaagtag");
        getCo(jTextArea1.getText());
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        About01 ab = new About01();
        ab.setVisible(true);
        one.setEnabled(false);
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jTextArea1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextArea1CaretUpdate
        getCo(jTextArea1.getText());
        jTextArea1.setSelectedTextColor(Color.PINK);
    }//GEN-LAST:event_jTextArea1CaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(One.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new One().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.ico")));
    }
}
